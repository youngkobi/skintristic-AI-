import React, { useEffect, useState } from "react";
import "./summary.css"; // Import the CSS file
import axios from "axios";
import button from "../../assets/buttin-icon-shrunk.svg";

const Summary = ({ apiSum, setApiSum }) => {
    const [base64String, setBase64String] = useState('');
    const [selectedRace, setSelectedRace] = useState(null);
    const [selectedSidebar, setSelectedSidebar] = useState("race");
     const [activeIndex, setActiveIndex] = useState(0);
     const [activeIndexAge, setActiveIndexAge] = useState(0);
     const [activeIndexG, setActiveIndexG] = useState(0);
     
  
  // Effect #1: Converts the image to Base64
  useEffect(() => {
    const convertImageToBase64 = async (imageUrl) => {
      try {
        const response = await fetch(imageUrl);
        const blob = await response.blob();

        const reader = new FileReader();
        reader.onloadend = () => {
          setBase64String(reader.result);
        };
        reader.readAsDataURL(blob);
      } catch (error) {
        console.error('Error converting image to Base64:', error);
      }
    };
    convertImageToBase64(button);
  }, []); // The empty dependency array ensures this runs only once

  // Effect #2: Triggers the API call when base64String is available
  useEffect(() => {
    // Only run this effect if base64String is not an empty string
    if (base64String) {
      proccesing();
    }
  }, [base64String]); // This dependency array watches for changes to base64String

  const proccesing = () => {
    const apiUrl =
      "https://us-central1-api-skinstric-ai.cloudfunctions.net/skinstricPhaseTwo";
    const postData = {
      image: base64String,
    };
    axios.post(apiUrl, postData)
      .then((response) => {
        const summary = response.data;
        setApiSum(summary.data);
      })
      .catch((error) => {
        console.error("Error calling API:", error);
      });
  };

  // SIDEBAR REACTIVE CODE
   const [activeBox, setActiveBox] = useState(0); 
  const handleBoxClick = (index) => {
    setActiveBox(index);
  };
  
  
    
  if (!apiSum) {
    return <p>Loading data...</p>;
  }
  
  // Now that we know apiSum is not null, it's safe to process
  const entriesArray = Object.entries(apiSum);
  const raceData = entriesArray[0];
  const ageData = entriesArray[1];
  const genderData = entriesArray[2];
 
  
  const raceDataNext = raceData[1];
  const ageDataNext = ageData[1];
  const genderDataNext = genderData[1];
  console.log(ageDataNext);
  const ageDataEntries = Object.entries(ageDataNext)

  
  
  const sortedGenderDataEntries = Object.entries(genderDataNext).sort(
      ([genderA, valueA], [genderB, valueB]) => valueB - valueA
      
    );
  const sortedRaceDataEntries = Object.entries(raceDataNext).sort(
      ([nameA, valueA], [nameB, valueB]) => valueB - valueA
      
    );
const [raceName, confidenceValue] = sortedRaceDataEntries[activeIndex];
const [age, confidenceValueA] = ageDataEntries[activeIndexAge];
console.log
(ageDataEntries[activeIndex])
const [gender, confidenceValueG] = sortedGenderDataEntries[activeIndex];
const handleListClick = (index) => {
  setActiveIndex(index);
};
const handleListClick2 = (index) => {
  setActiveIndexAge(index);
};
const handleListClick3 = (index) => {
  setActiveIndexG(index);
};

  
  const circumference = 2 * Math.PI * 45; // Radius is 45 (from CSS)
  const strokeDashoffset =
    circumference - (confidenceValue) * circumference;
  const strokeDashoffset2 =
    circumference - (confidenceValueA) * circumference;
  const strokeDashoffset3 =
    circumference - (confidenceValue) * circumference;
    

  return (
    
    <div className="demographics-container">
        <header className="header">
        <h1>A.I. ANALYSIS</h1>
        <h2>DEMOGRAPHICS</h2>
        <h3>PREDICTED RACE & AGE</h3>
      </header>

      <div className="content-area">
        <aside className="sidebar">
          <div
            
           className={`${activeBox === 0 ? "active sidebar-item" : "sidebar-item item-2"}`}
        onClick={() => handleBoxClick(0)}
          >
            <span className="value"> {raceName}</span>
            <span className="label">RACE</span>
          </div>
          <div
             className={`${activeBox === 1 ? "active sidebar-item" : "sidebar-item item-2"}`}
        onClick={() => handleBoxClick(1)}
          >
            <span className="value">{age}</span>
            <span className="label">AGE</span>
          </div>
          <div
             className={`${activeBox === 2 ? "active sidebar-item" : "sidebar-item item-2"}`}
        onClick={() => handleBoxClick(2)}
          >
            <span className="value">{"male"}</span>
            <span className="label">SEX</span>
          </div>
        </aside>

        <main className="main-content">
          {activeBox === 0 ? <div className="chart-section">
            <div className="donut-chart-container">
              <div className="selected-race--display">
                <div className="predicted-race-display">
                  <span>{raceName}</span>
                </div>
              </div>
              <svg className="donut-chart" viewBox="0 0 100 100">
                <circle
                  className="donut-chart-background"
                  cx="50"
                  cy="50"
                  r="45"
                ></circle>
                <circle
                  className="donut-chart-segment"
                  cx="50"
                  cy="50"
                  r="45"
                  strokeDasharray={circumference}
                  strokeDashoffset={strokeDashoffset}
                ></circle>
              </svg>
              <span className="confidence-percentage">
                {(confidenceValue *100).toFixed(0)}%
              </span>
            </div>
            <div className="confidence-list-section">
              <div className="confidence-header">
                <span>RACE</span>
                <span>AI CONFIDENCE</span>
              </div>
              <ul className="confidence-list">
                {sortedRaceDataEntries
                .map(([name,value], index) => {

            const percentage = value * 100;
          const formattedPercentage = percentage.toFixed(0);
          return(
                  <div className="list__wrapper" key={index}>
                    <li
                      key={index}
                         onClick={() => handleListClick(index)}
                className={activeIndex === index ? "active-confidence-item" : ""}
                    >
                      <span className="list-icon">◇</span>
                      <span> {name}</span>
                      <span className="number__confidence">
                        {formattedPercentage}%
                      </span>
                    </li>
                  </div>
)})}
              </ul>
            </div>
          </div>
        :
        <div className="chart-section">
            <div className="donut-chart-container">
              <div className="selected-race--display">
                <div className="predicted-race-display">
                  <span>{raceName}</span>
                </div>
              </div>
              <svg className="donut-chart" viewBox="0 0 100 100">
                <circle
                  className="donut-chart-background"
                  cx="50"
                  cy="50"
                  r="45"
                ></circle>
                <circle
                  className="donut-chart-segment"
                  cx="50"
                  cy="50"
                  r="45"
                  strokeDasharray={circumference}
                  strokeDashoffset={strokeDashoffset2}
                ></circle>
              </svg>
              <span className="confidence-percentage">
                {(confidenceValueA *100).toFixed(0)}%
              </span>
            </div>
            <div className="confidence-list-section">
              <div className="confidence-header">
                <span>RACE</span>
                <span>AI CONFIDENCE</span>
              </div>
              <ul className="confidence-list">
                {ageDataEntries
                .map(([name,value], index) => {

            const percentage = value * 100;
          const formattedPercentage = percentage.toFixed(0);
          return(
                  <div className="list__wrapper" key={index}>
                    <li
                      key={index}
                         onClick={() => handleListClick2(index)}
                className={activeIndexAge === index ? "active-confidence-item" : ""}
                    >
                      <span className="list-icon">◇</span>
                      <span> {name}</span>
                      <span className="number__confidence">
                        {formattedPercentage}%
                      </span>
                    </li>
                  </div>
)})}
              </ul>
            </div>
          </div>
        }
        </main>
      </div>
    </div>
  );
};

export default Summary;
